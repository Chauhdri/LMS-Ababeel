import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["checked", "uncheckedIcon", "checkedIcon", "label", "className", "component", "componentsProps", "defaultChecked", "disabled", "disableIcon", "overlay", "id", "indeterminate", "indeterminateIcon", "name", "onBlur", "onChange", "onFocus", "onFocusVisible", "required", "color", "variant", "size"];
import * as React from 'react';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import { unstable_useId as useId, unstable_capitalize as capitalize } from '@mui/utils';
import { unstable_composeClasses as composeClasses } from '@mui/base';
import { useSwitch } from '@mui/base/SwitchUnstyled';
import { styled, useThemeProps } from '../styles';
import checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';
import CheckIcon from '../internal/svg-icons/Check';
import IndeterminateIcon from '../internal/svg-icons/HorizontalRule';
import { TypographyContext } from '../Typography/Typography';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

const useUtilityClasses = ownerState => {
  const {
    checked,
    disabled,
    disableIcon,
    focusVisible,
    color,
    variant,
    size
  } = ownerState;
  const slots = {
    root: ['root', checked && 'checked', disabled && 'disabled', focusVisible && 'focusVisible', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    checkbox: ['checkbox', disabled && 'disabled'],
    // disabled class is necessary for displaying global variant
    action: ['action', disableIcon && disabled && 'disabled', focusVisible && 'focusVisible'],
    // add disabled class to action element for displaying global variant
    input: ['input'],
    label: ['label']
  };
  return composeClasses(slots, getCheckboxUtilityClass, {});
};

const CheckboxRoot = styled('span', {
  name: 'JoyCheckbox',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$vars$palette, _theme$vars$palette2, _theme$vars$palette3;

  return _extends({
    '--Icon-fontSize': 'var(--Checkbox-size)'
  }, ownerState.size === 'sm' && {
    '--Checkbox-size': '1rem',
    '--Checkbox-gap': '0.375rem',
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === 'md' && {
    '--Checkbox-size': '1.25rem',
    '--Checkbox-gap': '0.5rem',
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === 'lg' && {
    '--Checkbox-size': '1.5rem',
    '--Checkbox-gap': '0.625rem',
    fontSize: theme.vars.fontSize.lg
  }, {
    position: ownerState.overlay ? 'initial' : 'relative',
    display: 'inline-flex',
    fontFamily: theme.vars.fontFamily.body,
    lineHeight: 'var(--Checkbox-size)',
    // prevent label from having larger height than the checkbox
    color: theme.vars.palette.text.primary,
    [`&.${checkboxClasses.disabled}`]: {
      color: (_theme$vars$palette = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette.plainDisabledColor
    }
  }, ownerState.disableIcon && {
    color: (_theme$vars$palette2 = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette2[`${ownerState.variant}Color`],
    [`&.${checkboxClasses.disabled}`]: {
      color: (_theme$vars$palette3 = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette3[`${ownerState.variant}DisabledColor`]
    }
  });
});
const CheckboxCheckbox = styled('span', {
  name: 'JoyCheckbox',
  slot: 'Checkbox',
  overridesResolver: (props, styles) => styles.checkbox
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants$, _theme$variants$2, _theme$variants$3;

  return [_extends({
    boxSizing: 'border-box',
    borderRadius: theme.vars.radius.xs,
    width: 'var(--Checkbox-size)',
    height: 'var(--Checkbox-size)',
    display: 'inline-flex',
    justifyContent: 'center',
    alignItems: 'center',
    flexShrink: 0,
    // TODO: discuss the transition approach in a separate PR. This value is copied from mui-material Button.
    transition: 'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'
  }, ownerState.disableIcon && {
    display: 'contents'
  }), ...(!ownerState.disableIcon ? [(_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    '&:hover': (_theme$variants$ = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants$[ownerState.color]
  }, {
    '&:active': (_theme$variants$2 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants$2[ownerState.color]
  }, {
    [`&.${checkboxClasses.disabled}`]: (_theme$variants$3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants$3[ownerState.color]
  }] : [])];
});
const CheckboxAction = styled('span', {
  name: 'JoyCheckbox',
  slot: 'Action',
  overridesResolver: (props, styles) => styles.action
})(({
  theme,
  ownerState
}) => {
  var _theme$variants2, _theme$variants$4, _theme$variants$5, _theme$variants$6;

  return [{
    borderRadius: `var(--Checkbox-action-radius, ${ownerState.overlay ? 'var(--internal-action-radius, inherit)' : 'inherit'})`,
    position: 'absolute',
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
    zIndex: 1,
    // The action element usually cover the area of nearest positioned parent
    // TODO: discuss the transition approach in a separate PR. This value is copied from mui-material Button.
    transition: 'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    [theme.focus.selector]: theme.focus.default
  }, ...(ownerState.disableIcon ? [(_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color], {
    '&:hover': (_theme$variants$4 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants$4[ownerState.color]
  }, {
    '&:active': (_theme$variants$5 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants$5[ownerState.color]
  }, {
    [`&.${checkboxClasses.disabled}`]: (_theme$variants$6 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants$6[ownerState.color]
  }] : [])];
});
const CheckboxInput = styled('input', {
  name: 'JoyCheckbox',
  slot: 'Input',
  overridesResolver: (props, styles) => styles.input
})(() => ({
  margin: 0,
  opacity: 0,
  position: 'absolute',
  width: '100%',
  height: '100%',
  cursor: 'pointer'
}));
const CheckboxLabel = styled('label', {
  name: 'JoyCheckbox',
  slot: 'Label',
  overridesResolver: (props, styles) => styles.label
})(({
  ownerState
}) => _extends({
  flex: 1,
  minWidth: 0
}, ownerState.disableIcon ? {
  zIndex: 1,
  // label should stay on top of the action.
  pointerEvents: 'none' // makes hover ineffect.

} : {
  marginInlineStart: 'var(--Checkbox-gap)'
}));

const defaultCheckedIcon = /*#__PURE__*/_jsx(CheckIcon, {});

const defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateIcon, {});

const Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {
  var _componentsProps$chec, _componentsProps$acti, _componentsProps$inpu, _componentsProps$labe;

  const props = useThemeProps({
    props: inProps,
    name: 'JoyCheckbox'
  });

  const {
    checked: checkedProp,
    uncheckedIcon,
    checkedIcon = defaultCheckedIcon,
    label,
    className,
    component,
    componentsProps = {},
    defaultChecked,
    disabled: disabledProp,
    disableIcon = false,
    overlay,
    id: idOverride,
    indeterminate = false,
    indeterminateIcon = defaultIndeterminateIcon,
    name,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    color,
    variant,
    size = 'md'
  } = props,
        otherProps = _objectWithoutPropertiesLoose(props, _excluded);

  const id = useId(idOverride);
  const useCheckboxProps = {
    checked: checkedProp,
    defaultChecked,
    disabled: disabledProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible
  };
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible
  } = useSwitch(useCheckboxProps);
  const isCheckboxActive = checked || indeterminate;
  const activeColor = color || 'primary';
  const inactiveColor = color || 'neutral';
  const activeVariant = variant || 'solid';
  const inactiveVariant = variant || 'outlined';

  const ownerState = _extends({}, props, {
    checked,
    disabled,
    disableIcon,
    overlay,
    focusVisible,
    color: isCheckboxActive ? activeColor : inactiveColor,
    variant: isCheckboxActive ? activeVariant : inactiveVariant,
    size
  });

  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/_jsxs(CheckboxRoot, _extends({
    ref: ref
  }, otherProps, {
    as: component,
    ownerState: ownerState,
    className: clsx(classes.root, className),
    children: [/*#__PURE__*/_jsxs(CheckboxCheckbox, _extends({}, componentsProps == null ? void 0 : componentsProps.checkbox, {
      ownerState: ownerState,
      className: clsx(classes.checkbox, (_componentsProps$chec = componentsProps.checkbox) == null ? void 0 : _componentsProps$chec.className),
      children: [/*#__PURE__*/_jsx(CheckboxAction, _extends({}, componentsProps == null ? void 0 : componentsProps.action, {
        ownerState: ownerState,
        className: clsx(classes.action, (_componentsProps$acti = componentsProps.action) == null ? void 0 : _componentsProps$acti.className),
        children: /*#__PURE__*/_jsx(CheckboxInput, _extends({}, componentsProps == null ? void 0 : componentsProps.input, {
          ownerState: ownerState
        }, getInputProps(componentsProps.input), {
          id: id,
          name: name,
          className: clsx(classes.input, (_componentsProps$inpu = componentsProps.input) == null ? void 0 : _componentsProps$inpu.className)
        }))
      })), indeterminate && !checked && !disableIcon && indeterminateIcon, checked && !disableIcon && checkedIcon, !checked && !disableIcon && !indeterminate && uncheckedIcon]
    })), label && /*#__PURE__*/_jsx(TypographyContext.Provider, {
      value: true,
      children: /*#__PURE__*/_jsx(CheckboxLabel, _extends({}, componentsProps == null ? void 0 : componentsProps.label, {
        htmlFor: id,
        ownerState: ownerState,
        className: clsx(classes.label, (_componentsProps$labe = componentsProps.label) == null ? void 0 : _componentsProps$labe.className),
        children: label
      }))
    })]
  }));
});
process.env.NODE_ENV !== "production" ? Checkbox.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * If `true`, the component is checked.
   */
  checked: PropTypes.bool,

  /**
   * The icon to display when the component is checked.
   * @default <CheckIcon />
   */
  checkedIcon: PropTypes.node,

  /**
   * @ignore
   */
  children: PropTypes.node,

  /**
   * Class name applied to the root element.
   */
  className: PropTypes.string,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['danger', 'info', 'primary', 'success', 'warning']), PropTypes.string]),

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,

  /**
   * The props used for each slot inside the Input.
   * @default {}
   */
  componentsProps: PropTypes.shape({
    action: PropTypes.object,
    checkbox: PropTypes.object,
    input: PropTypes.object,
    label: PropTypes.object,
    root: PropTypes.object
  }),

  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: PropTypes.bool,

  /**
   * If `true`, the component is disabled.
   */
  disabled: PropTypes.bool,

  /**
   * If `true`, the checked icon is removed and the selected variant is applied on the `action` element instead.
   * @default false
   */
  disableIcon: PropTypes.bool,

  /**
   * @ignore
   */
  id: PropTypes.string,

  /**
   * If `true`, the component appears indeterminate.
   * This does not set the native input element to indeterminate due
   * to inconsistent behavior across browsers.
   * However, we set a `data-indeterminate` attribute on the `input`.
   * @default false
   */
  indeterminate: PropTypes.bool,

  /**
   * The icon to display when the component is indeterminate.
   * @default <IndeterminateCheckBoxIcon />
   */
  indeterminateIcon: PropTypes.node,

  /**
   * The label element next to the checkbox.
   */
  label: PropTypes.node,

  /**
   * The `name` attribute of the input.
   */
  name: PropTypes.string,

  /**
   * @ignore
   */
  onBlur: PropTypes.func,

  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: PropTypes.func,

  /**
   * @ignore
   */
  onFocus: PropTypes.func,

  /**
   * @ignore
   */
  onFocusVisible: PropTypes.func,

  /**
   * If `true`, the root element's position is set to initial which allows the action area to fill the nearest positioned parent.
   * This prop is useful for composing Checkbox with ListItem component.
   * @default false
   */
  overlay: PropTypes.bool,

  /**
   * If `true`, the `input` element is required.
   */
  required: PropTypes.bool,

  /**
   * The size of the component.
   * @default 'md'
   */
  size: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),

  /**
   * The icon when `checked` is false.
   */
  uncheckedIcon: PropTypes.node,

  /**
   * The variant to use.
   * @default 'solid'
   */
  variant: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])
} : void 0;
export default Checkbox;