import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["children", "className", "action", "component", "color", "variant", "size"];
import * as React from 'react';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import { unstable_capitalize as capitalize, unstable_useForkRef as useForkRef } from '@mui/utils';
import { useButton } from '@mui/base/ButtonUnstyled';
import composeClasses from '@mui/base/composeClasses';
import { styled, useThemeProps } from '../styles';
import iconButtonClasses, { getIconButtonUtilityClass } from './iconButtonClasses';
import { jsx as _jsx } from "react/jsx-runtime";

const useUtilityClasses = ownerState => {
  const {
    color,
    disabled,
    focusVisible,
    focusVisibleClassName,
    size,
    variant
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  const composedClasses = composeClasses(slots, getIconButtonUtilityClass, {});

  if (focusVisible && focusVisibleClassName) {
    composedClasses.root += ` ${focusVisibleClassName}`;
  }

  return composedClasses;
};

const IconButtonRoot = styled('button', {
  name: 'JoyIconButton',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants$, _theme$variants$2, _theme$variants$3;

  return [_extends({
    '--Icon-margin': 'initial'
  }, ownerState.size === 'sm' && {
    '--Icon-fontSize': 'calc(var(--IconButton-size, 2rem) / 1.6)',
    // 1.25rem by default
    minWidth: 'var(--IconButton-size, 2rem)',
    // use min-width instead of height to make the button resilient to its content
    minHeight: 'var(--IconButton-size, 2rem)',
    // use min-height instead of height to make the button resilient to its content
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === 'md' && {
    '--Icon-fontSize': 'calc(var(--IconButton-size, 2.5rem) / 1.667)',
    // 1.5rem by default
    minWidth: 'var(--IconButton-size, 2.5rem)',
    minHeight: 'var(--IconButton-size, 2.5rem)',
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === 'lg' && {
    '--Icon-fontSize': 'calc(var(--IconButton-size, 3rem) - 1.714)',
    // 1.75rem by default
    minWidth: 'var(--IconButton-size, 3rem)',
    minHeight: 'var(--IconButton-size, 3rem)',
    fontSize: theme.vars.fontSize.lg
  }, {
    padding: 0,
    fontFamily: theme.vars.fontFamily.body,
    fontWeight: theme.vars.fontWeight.md,
    margin: `var(--IconButton-margin)`,
    // to be controlled by other components, eg. Input
    borderRadius: `var(--IconButton-radius, ${theme.vars.radius.sm})`,
    // to be controlled by other components, eg. Input
    border: 'none',
    backgroundColor: 'transparent',
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
    // TODO: discuss the transition approach in a separate PR. This value is copied from mui-material Button.
    transition: 'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    [theme.focus.selector]: theme.focus.default
  }), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    '&:hover': (_theme$variants$ = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants$[ownerState.color]
  }, {
    '&:active': (_theme$variants$2 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants$2[ownerState.color]
  }, {
    [`&.${iconButtonClasses.disabled}`]: (_theme$variants$3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants$3[ownerState.color]
  }];
});
const IconButton = /*#__PURE__*/React.forwardRef(function IconButton(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: 'JoyIconButton'
  });

  const {
    children,
    className,
    action,
    component = 'button',
    color = 'primary',
    variant = 'soft',
    size = 'md'
  } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded);

  const buttonRef = React.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const ComponentProp = component;
  const {
    focusVisible,
    setFocusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    ref: handleRef
  }));
  React.useImperativeHandle(action, () => ({
    focusVisible: () => {
      var _buttonRef$current;

      setFocusVisible(true);
      (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
    }
  }), [setFocusVisible]);

  const ownerState = _extends({}, props, {
    component,
    color,
    variant,
    size,
    instanceSize: inProps.size,
    focusVisible
  });

  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/_jsx(IconButtonRoot, _extends({
    as: ComponentProp,
    className: clsx(classes.root, className),
    ownerState: ownerState
  }, other, getRootProps(), {
    children: children
  }));
});
process.env.NODE_ENV !== "production" ? IconButton.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
    current: PropTypes.shape({
      focusVisible: PropTypes.func.isRequired
    })
  })]),

  /**
   * @ignore
   */
  children: PropTypes.node,

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,

  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: PropTypes.bool,

  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: PropTypes.string,

  /**
   * The size of the component.
   */
  size: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),

  /**
   * @default 0
   */
  tabIndex: PropTypes.number,

  /**
   * The variant to use.
   * @default 'soft'
   */
  variant: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])
} : void 0;
export default IconButton;