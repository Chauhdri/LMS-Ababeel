import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["children", "className", "component", "size", "separator"];
import { unstable_composeClasses as composeClasses } from '@mui/base';
import { unstable_capitalize as capitalize } from '@mui/utils';
import clsx from 'clsx';
import PropTypes from 'prop-types';
import * as React from 'react';
import { useThemeProps } from '../styles';
import styled from '../styles/styled';
import breadcrumbsClasses, { getBreadcrumbsUtilityClass } from './breadcrumbsClasses';
import { jsx as _jsx } from "react/jsx-runtime";

const useUtilityClasses = ownerState => {
  const {
    size
  } = ownerState;
  const slots = {
    root: ['root', size && `size${capitalize(size)}`],
    li: ['li'],
    ol: ['ol'],
    separator: ['separator']
  };
  return composeClasses(slots, getBreadcrumbsUtilityClass, {});
};

const BreadcrumbsRoot = styled('nav', {
  name: 'MuiBreadcrumbs',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    return [{
      [`& .${breadcrumbsClasses.li}`]: styles.li
    }, styles.root];
  }
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === 'sm' && {
  '--Breadcrumbs-gap': '0.25rem',
  fontSize: theme.vars.fontSize.sm,
  padding: '0.5rem'
}, ownerState.size === 'md' && {
  '--Breadcrumbs-gap': '0.375rem',
  fontSize: theme.vars.fontSize.md,
  padding: '0.75rem'
}, ownerState.size === 'lg' && {
  '--Breadcrumbs-gap': '0.5rem',
  fontSize: theme.vars.fontSize.lg,
  padding: '1rem'
}, {
  lineHeight: 1
}));
const BreadcrumbsOl = styled('ol', {
  name: 'MuiBreadcrumbs',
  slot: 'Ol',
  overridesResolver: (props, styles) => styles.ol
})({
  display: 'flex',
  flexWrap: 'wrap',
  alignItems: 'center',
  // reset user-agent style
  padding: 0,
  margin: 0,
  listStyle: 'none'
});
const BreadcrumbsSeparator = styled('li', {
  name: 'MuiBreadcrumbs',
  slot: 'Separator',
  overridesResolver: (props, styles) => styles.separator
})({
  display: 'flex',
  userSelect: 'none',
  marginInline: 'var(--Breadcrumbs-gap)'
});
const Breadcrumbs = /*#__PURE__*/React.forwardRef(function Breadcrumbs(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: 'MuiBreadcrumbs'
  });

  const {
    children,
    className,
    component = 'nav',
    size = 'md',
    separator = '/'
  } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded);

  const ownerState = _extends({}, props, {
    component,
    separator,
    size
  });

  const classes = useUtilityClasses(ownerState);
  const listRef = React.useRef(null);
  const allItems = React.Children.toArray(children).filter(child => {
    return /*#__PURE__*/React.isValidElement(child);
  }).map((child, index) => /*#__PURE__*/_jsx("li", {
    className: classes.li,
    children: child
  }, `child-${index}`));
  return /*#__PURE__*/_jsx(BreadcrumbsRoot, _extends({
    ref: ref,
    className: clsx(classes.root, className),
    ownerState: ownerState
  }, other, {
    children: /*#__PURE__*/_jsx(BreadcrumbsOl, {
      className: classes.ol,
      ref: listRef,
      ownerState: ownerState,
      children: allItems.reduce((acc, current, index) => {
        if (index < allItems.length - 1) {
          acc = acc.concat(current, /*#__PURE__*/_jsx(BreadcrumbsSeparator, {
            "aria-hidden": true,
            className: classes.separator,
            ownerState: ownerState,
            children: separator
          }, `separator-${index}`));
        } else {
          acc.push(current);
        }

        return acc;
      }, [])
    })
  }));
});
process.env.NODE_ENV !== "production" ? Breadcrumbs.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * The content of the component.
   */
  children: PropTypes.node,

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,

  /**
   * Custom separator node.
   * @default '/'
   */
  separator: PropTypes.node,

  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: PropTypes.oneOf(['sm', 'md', 'lg']),

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
} : void 0;
export default Breadcrumbs;