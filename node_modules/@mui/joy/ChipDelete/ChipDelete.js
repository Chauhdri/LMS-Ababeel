import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";

var _Close;

const _excluded = ["className", "component", "children", "variant", "color", "disabled"];
import * as React from 'react';
import clsx from 'clsx';
import PropTypes from 'prop-types';
import { unstable_capitalize as capitalize, unstable_useForkRef as useForkRef } from '@mui/utils';
import { unstable_composeClasses as composeClasses, useButton } from '@mui/base';
import { useThemeProps } from '../styles';
import styled from '../styles/styled';
import Close from '../internal/svg-icons/Close';
import chipDeleteClasses, { getChipDeleteUtilityClass } from './chipDeleteClasses';
import ChipContext from '../Chip/ChipContext';
import { jsx as _jsx } from "react/jsx-runtime";

const useUtilityClasses = ownerState => {
  const {
    focusVisible,
    variant,
    color,
    disabled
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getChipDeleteUtilityClass, {});
};

const ChipDeleteRoot = styled('button', {
  name: 'JoyChipDelete',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants$, _theme$variants$2, _theme$variants$3;

  return [{
    '--Icon-margin': 'initial',
    // prevent overrides from parent
    pointerEvents: 'visible',
    // force the ChipDelete to be hoverable because the decorator can have pointerEvents 'none'
    width: 'var(--Chip-delete-size, 2rem)',
    height: 'var(--Chip-delete-size, 2rem)',
    borderRadius: 'var(--Chip-delete-radius, 50%)',
    margin: 'var(--Chip-delete-margin)',
    display: 'inline-flex',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1,
    // overflow above sibling button or anchor
    border: 'none',
    // reset user agent stylesheet
    background: 'none',
    // reset user agent stylesheet
    padding: '0px',
    // reset user agent stylesheet
    [theme.focus.selector]: theme.focus.default
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    '&:hover': (_theme$variants$ = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants$[ownerState.color]
  }, {
    '&:active': (_theme$variants$2 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants$2[ownerState.color]
  }, {
    [`&.${chipDeleteClasses.disabled}`]: (_theme$variants$3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants$3[ownerState.color]
  }];
});
const chipVariantMapping = {
  plain: 'outlined',
  outlined: 'soft',
  soft: 'solid',
  solid: 'solid'
};
const ChipDelete = /*#__PURE__*/React.forwardRef(function ChipDelete(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: 'JoyChipDelete'
  });

  const {
    className,
    component,
    children,
    variant: variantProp,
    color: colorProp,
    disabled: disabledProp
  } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded);

  const chipContext = React.useContext(ChipContext);
  const color = colorProp || chipContext.color || 'primary';
  const variant = variantProp || chipVariantMapping[chipContext.variant] || 'solid';
  const disabled = disabledProp != null ? disabledProp : chipContext.disabled;
  const buttonRef = React.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    disabled,
    ref: handleRef
  }));

  const ownerState = _extends({}, props, {
    disabled,
    variant,
    color,
    focusVisible
  });

  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/_jsx(ChipDeleteRoot, _extends({
    as: component,
    className: clsx(classes.root, className),
    ownerState: ownerState
  }, other, getRootProps(), {
    children: children != null ? children : _Close || (_Close = /*#__PURE__*/_jsx(Close, {}))
  }));
});
process.env.NODE_ENV !== "production" ? ChipDelete.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * If provided, it will replace the default icon.
   */
  children: PropTypes.node,

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: PropTypes.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']),

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,

  /**
   * @ignore
   */
  disabled: PropTypes.bool,

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),

  /**
   * The variant to use.
   * @default 'solid'
   */
  variant: PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid'])
} : void 0;
export default ChipDelete;